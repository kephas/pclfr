====== TraductionPclNumbersCharactersAndStrings ======
Created samedi 16/12/2006

====== Les nombres, caractères et chaînes de caractères ======

Bien que les fonctions, les variables, les macros et 25 opérateurs spéciaux fournissent les blocs de base du langage lui-même, les blocs de votre programme seront les structures de données que vous utilisez. Comme le faisait remarquer Fred Brooks dans //Le mythe du mois-homme//, « La représentation //est// l'essence de la programmation. »

Common Lisp fournit un support de base pour la plupart des types de données que l'on trouve typiquement dans les langages modernes : les nombres (entiers, à virgule flottante et complexes), les caractères, les chaînes de caractères, les tableaux (dont les tableaux à plusieurs dimensions), les listes, les tables de hashage, les flux d'entrée et sortie et une abstraction pour représenter portablement des noms de fichiers. Les fonctions sont également un type de donnée de première classe en Lisp -- elles peuvent être stockées dans des variables, passées en arguments, renvoyées comme valeur de retour et créées durant l'exécution.

Et ces types intégrés ne sont que le début. Ils sont définis dans le standard du langage pour que les programmeurs puissent compter sur leur présence et parce qu'ils ont tendance à être plus facile à implémenter efficacement lorsqu'ils sont étroitement liés au reste de l'implémentation. Mais comme vous le verrez dans les chapîtres suivants, Common Lisp fournit également plusieurs façons de définir vos propres types de données, de définir leurs opérations et de les intégrer avec les types intégrés(Td:?).

Mais pour l'instant, vous allez commencer par les types intégrés. Parce que Lisp est un langage de haut niveau, les détails d'implémentation des différentes types de données sont en grande partie cachés. De votre point de vue d'utilisateur du langage, les types intégrés sont définis par les fonctions qui opèrent dessus. Donc, pour apprendre un type de donnée, vous n'avez qu'à en apprendre sur les fonctions avec lesquelles vous pouvez l'utiliser. De pus, la plupart des types intégrés ont une syntaxe spéciale que le lecteur Lisp comprend et que l'imprimeur Lisp utilise. C'est pour ça, par exemple, que vous vous pouvez écrire des chaînes comme "foo", des nombres comme 123, 1/23 et 1.23 et des listes comme (a b c). Je décrirai la syntaxe pour les différents type d'objets quand décris les fonctions pour les manipuler.
